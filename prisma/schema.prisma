generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId                   String  @map("user_id") @db.Uuid
  type                     String
  provider                 String
  providerAccountId        String  @map("provider_account_id")
  refresh_token            String?
  access_token             String?
  refresh_token_expires_in Int?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String?
  email         String?     @unique
  emailVerified DateTime?   @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  DartBoard     DartBoard[]

  @@map("users")
}

model Session {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model DartBoard {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  userId    String    @map("user_id") @db.Uuid
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Dart      Dart[]
  DartTag   DartTag[]

  @@map("dartboards")
}

model Dart {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @default(now()) @map("updated_at")
  deletedAt         DateTime?           @map("deleted_at")
  text              String
  dartBoardId       String              @map("dartboard_id") @db.Uuid
  dartBoard         DartBoard           @relation(fields: [dartBoardId], references: [id], onDelete: Cascade)
  AssociatedDartTag AssociatedDartTag[]

  @@map("darts")
}

model DartTag {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  dartBoardId       String              @map("dartboard_id") @db.Uuid
  name              String
  color             Int
  AssociatedDartTag AssociatedDartTag[]
  dartBoard         DartBoard           @relation(fields: [dartBoardId], references: [id], onDelete: Cascade)

  @@map("dart_tags")
}

model AssociatedDartTag {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  dartId    String  @map("dart_id") @db.Uuid
  dartTagId String  @map("darttag_id") @db.Uuid
  dart      Dart    @relation(fields: [dartId], references: [id], onDelete: Cascade)
  dartTag   DartTag @relation(fields: [dartTagId], references: [id], onDelete: Cascade)

  @@map("associated_dart_tags")
}
